(()=>{"use strict";var e={827:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.createResponse=void 0,o.createResponse=(e,o)=>({statusCode:e,body:JSON.stringify(o)})},743:function(e,o,r){var t=this&&this.__awaiter||function(e,o,r,t){return new(r||(r=Promise))((function(i,n){function s(e){try{c(t.next(e))}catch(e){n(e)}}function l(e){try{c(t.throw(e))}catch(e){n(e)}}function c(e){var o;e.done?i(e.value):(o=e.value,o instanceof r?o:new r((function(e){e(o)}))).then(s,l)}c((t=t.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createUserPoolAndAppClient=o.cognitoIdentityServiceProvider=void 0;const i=r(336),n=r(259);o.cognitoIdentityServiceProvider=new i.CognitoIdentityServiceProvider({region:n.cognitoUserPoolRegion,apiVersion:"2016-04-18"}),o.createUserPoolAndAppClient=()=>t(void 0,void 0,void 0,(function*(){try{i.config.update({region:n.cognitoUserPoolRegion});const l=(yield(s=n.cognitoUserPoolName,t(void 0,void 0,void 0,(function*(){var e;try{const r=null===(e=(yield o.cognitoIdentityServiceProvider.listUserPools({MaxResults:10}).promise()).UserPools)||void 0===e?void 0:e.find((e=>e.Name===s));if(!r)throw new Error(`User Pool ${s} wasn't found`);return r.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))))||(yield(e=n.cognitoUserPoolName,t(void 0,void 0,void 0,(function*(){var t;try{const i=Object.assign({PoolName:e,Policies:{PasswordPolicy:{MinimumLength:8,RequireUppercase:!0,RequireLowercase:!0,RequireNumbers:!0,RequireSymbols:!1}}},r);return null===(t=(yield o.cognitoIdentityServiceProvider.createUserPool(i).promise()).UserPool)||void 0===t?void 0:t.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))));if(!l)throw new Error(`User Pool ${n.cognitoUserPoolName} did not found or created`);const c=(yield((e,r)=>t(void 0,void 0,void 0,(function*(){var t;try{const i=null===(t=(yield o.cognitoIdentityServiceProvider.listUserPoolClients({UserPoolId:e}).promise()).UserPoolClients)||void 0===t?void 0:t.find((e=>e.ClientName===r));if(i)return i.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(l,n.cognitoUserPoolAppClientName))||(yield(e=>t(void 0,void 0,void 0,(function*(){var r;try{const t={UserPoolId:e,ClientName:n.cognitoUserPoolAppClientName,GenerateSecret:!1,AllowedOAuthFlowsUserPoolClient:!0,AllowedOAuthFlows:["code","implicit"],AllowedOAuthScopes:["phone","email","openid","profile"],ExplicitAuthFlows:[process.env.AUTH_FLOW_TYPE||"ALLOW_USER_PASSWORD_AUTH"],CallbackURLs:["http://localhost:3000/callback"],LogoutURLs:["http://localhost:3000/logout"]};return null===(r=(yield o.cognitoIdentityServiceProvider.createUserPoolClient(t).promise()).UserPoolClient)||void 0===r?void 0:r.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(l));return{userPoolId:l,appClientId:c}}catch(e){console.error("Error creating User Pool:",e)}var e,r,s}))},259:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.cognitoUserPoolAppClientName=o.cognitoUserPoolRegion=o.cognitoUserPoolId=o.cognitoUserPoolName=void 0,o.cognitoUserPoolName="guyLeifer-skills",o.cognitoUserPoolId="eu-west-1_PsmNFdo3z",o.cognitoUserPoolRegion="eu-west-1",o.cognitoUserPoolAppClientName="guyLeifer-skills-app-client"},161:function(e,o,r){var t=this&&this.__awaiter||function(e,o,r,t){return new(r||(r=Promise))((function(i,n){function s(e){try{c(t.next(e))}catch(e){n(e)}}function l(e){try{c(t.throw(e))}catch(e){n(e)}}function c(e){var o;e.done?i(e.value):(o=e.value,o instanceof r?o:new r((function(e){e(o)}))).then(s,l)}c((t=t.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.handler=void 0;const i=r(743),n=r(827),s=r(199);o.handler=e=>t(void 0,void 0,void 0,(function*(){var o,r,t;try{const{valid:c,message:a}=(0,s.validateRequest)(e,l);if(!c)throw new Error(a);const d=JSON.parse(e.body),{username:u,password:v}=d,P={AuthFlow:process.env.AUTH_FLOW_TYPE||"",ClientId:process.env.APP_CLIENT_ID||"",AuthParameters:{USERNAME:u,PASSWORD:v}},g=yield i.cognitoIdentityServiceProvider.initiateAuth(P).promise();return(0,n.createResponse)(200,{accessToken:null===(o=g.AuthenticationResult)||void 0===o?void 0:o.AccessToken,idToken:null===(r=g.AuthenticationResult)||void 0===r?void 0:r.IdToken,refreshToken:null===(t=g.AuthenticationResult)||void 0===t?void 0:t.RefreshToken})}catch(e){return(0,n.createResponse)(500,{error:e.message})}}));const l={username:e=>(0,s.validateIsraeliID)(e),password:e=>(0,s.validateStringMaxLength)(e,20)}},199:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.validateIsraeliID=o.validateIsraeliPhoneNumber=o.validateStringMinLength=o.validateStringMaxLength=o.validateRequest=void 0,o.validateRequest=(e,o)=>{if(!e.body)return{valid:!1,message:"Not valid request body"};const r=JSON.parse(e.body);for(const e in r){const t=r[e],i=o[e];if(i&&!i(t))return{valid:!1,message:`Not valid ${e} - ${t}`}}return{valid:!0}},o.validateStringMaxLength=(e,o)=>e.length<o,o.validateStringMinLength=(e,o)=>e.length>o,o.validateIsraeliPhoneNumber=e=>/^(05)[0-9]{8}$/.test(e),o.validateIsraeliID=e=>!((e=String(e).trim()).length>9)&&(e=e.length<9?("00000000"+e).slice(-9):e,Array.from(e,Number).reduce(((e,o,r)=>{const t=o*(r%2+1);return e+(t>9?t-9:t)}))%10==0)},336:e=>{e.exports=require("aws-sdk")}},o={},r=function r(t){var i=o[t];if(void 0!==i)return i.exports;var n=o[t]={exports:{}};return e[t].call(n.exports,n,n.exports,r),n.exports}(161),t=exports;for(var i in r)t[i]=r[i];r.__esModule&&Object.defineProperty(t,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,