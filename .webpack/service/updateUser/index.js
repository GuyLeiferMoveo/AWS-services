(()=>{"use strict";var e={827:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.createResponse=void 0,o.createResponse=(e,o)=>({statusCode:e,body:JSON.stringify(o)})},743:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,a)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createUserPoolAndAppClient=o.cognitoIdentityServiceProvider=void 0;const i=t(336),n=t(259);o.cognitoIdentityServiceProvider=new i.CognitoIdentityServiceProvider({region:n.cognitoUserPoolRegion,apiVersion:"2016-04-18"}),o.createUserPoolAndAppClient=()=>r(void 0,void 0,void 0,(function*(){try{i.config.update({region:n.cognitoUserPoolRegion});const a=(yield(s=n.cognitoUserPoolName,r(void 0,void 0,void 0,(function*(){var e;try{const t=null===(e=(yield o.cognitoIdentityServiceProvider.listUserPools({MaxResults:10}).promise()).UserPools)||void 0===e?void 0:e.find((e=>e.Name===s));if(!t)throw new Error(`User Pool ${s} wasn't found`);return t.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))))||(yield(e=n.cognitoUserPoolName,r(void 0,void 0,void 0,(function*(){var r;try{const i=Object.assign({PoolName:e,Policies:{PasswordPolicy:{MinimumLength:8,RequireUppercase:!0,RequireLowercase:!0,RequireNumbers:!0,RequireSymbols:!1}}},t);return null===(r=(yield o.cognitoIdentityServiceProvider.createUserPool(i).promise()).UserPool)||void 0===r?void 0:r.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))));if(!a)throw new Error(`User Pool ${n.cognitoUserPoolName} did not found or created`);const l=(yield((e,t)=>r(void 0,void 0,void 0,(function*(){var r;try{const i=null===(r=(yield o.cognitoIdentityServiceProvider.listUserPoolClients({UserPoolId:e}).promise()).UserPoolClients)||void 0===r?void 0:r.find((e=>e.ClientName===t));if(i)return i.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(a,n.cognitoUserPoolAppClientName))||(yield(e=>r(void 0,void 0,void 0,(function*(){var t;try{const r={UserPoolId:e,ClientName:n.cognitoUserPoolAppClientName,GenerateSecret:!1,AllowedOAuthFlowsUserPoolClient:!0,AllowedOAuthFlows:["code","implicit"],AllowedOAuthScopes:["phone","email","openid","profile"],ExplicitAuthFlows:[process.env.AUTH_FLOW_TYPE||"ALLOW_USER_PASSWORD_AUTH"],CallbackURLs:["http://localhost:3000/callback"],LogoutURLs:["http://localhost:3000/logout"]};return null===(t=(yield o.cognitoIdentityServiceProvider.createUserPoolClient(r).promise()).UserPoolClient)||void 0===t?void 0:t.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(a));return{userPoolId:a,appClientId:l}}catch(e){console.error("Error creating User Pool:",e)}var e,t,s}))},259:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.cognitoUserPoolAppClientName=o.cognitoUserPoolRegion=o.cognitoUserPoolId=o.cognitoUserPoolName=void 0,o.cognitoUserPoolName="guyLeifer-skills",o.cognitoUserPoolId="eu-west-1_PsmNFdo3z",o.cognitoUserPoolRegion="eu-west-1",o.cognitoUserPoolAppClientName="guyLeifer-skills-app-client"},583:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,a)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createTableIfNotExists=o.dynamoDb=void 0;const i=t(336);o.dynamoDb=new i.DynamoDB.DocumentClient({region:"il-central-1"});const n=new i.DynamoDB;o.createTableIfNotExists=()=>r(void 0,void 0,void 0,(function*(){var e;try{if(null===(e=(yield n.listTables().promise()).TableNames)||void 0===e?void 0:e.includes(process.env.DB_TABLE_NAME||"users"))return void console.log(`Table ${process.env.DB_TABLE_NAME} already exists.`);const o={TableName:process.env.DB_TABLE_NAME||"users",KeySchema:[{AttributeName:"userId",KeyType:"HASH"}],AttributeDefinitions:[{AttributeName:"userId",AttributeType:"S"}],ProvisionedThroughput:{ReadCapacityUnits:5,WriteCapacityUnits:5}},t=yield n.createTable(o).promise();return console.log(`Table ${process.env.DB_TABLE_NAME} created successfully.`),t}catch(e){console.error("Error creating table:",e)}}))},992:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,a)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.handler=void 0;const i=t(743),n=t(583),s=t(44),a=t(827),l=t(199),c={firstName:{cognito:"given_name",ddb:"firstName"},lastName:{cognito:"family_name",ddb:"lastName"},phoneNumber:{cognito:"phone_number",ddb:"phoneNumber"}};o.handler=e=>r(void 0,void 0,void 0,(function*(){var o;if(!(0,s.isUserAuthenticatedAuthorizer)(e))return s.unauthorizedResponse;try{const{valid:t,message:r}=(0,l.validateRequest)(e,d);if(!t)throw new Error(r);const s=e.body||"",u=JSON.parse(s),v=Object.assign({},u);delete v.userId;const p=[],h={};let f="SET ";Object.entries(v).forEach((([e,o],t)=>{p.push({Name:c[e].cognito,Value:o});const r=`:val${t}`;h[r]=o,f+=`${c[e].ddb} = ${r}, `})),f=f.slice(0,-2);const g={AccessToken:(null===(o=e.headers.Authorization)||void 0===o?void 0:o.split(" ")[1])||"",UserAttributes:p},y=(yield i.cognitoIdentityServiceProvider.updateUserAttributes(g).promise(),{TableName:process.env.DB_TABLE_NAME||"",Key:{userId:u.userId},UpdateExpression:f,ExpressionAttributeValues:h,ReturnValues:"ALL_NEW"}),m=yield n.dynamoDb.update(y).promise();return(0,a.createResponse)(200,m.Attributes||{})}catch(e){return(0,a.createResponse)(500,{error:e.message})}}));const d={firstName:e=>(0,l.validateStringMaxLength)(e,20),lastName:e=>(0,l.validateStringMaxLength)(e,20),password:e=>(0,l.validateStringMaxLength)(e,20),phoneNumber:e=>(0,l.validateIsraeliPhoneNumber)(e),userId:e=>(0,l.validateIsraeliID)(e)}},44:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,a)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.unauthorizedResponse=o.isUserAuthenticatedAuthorizer=o.isUserAuthenticated=void 0;const i=t(743);o.isUserAuthenticated=e=>r(void 0,void 0,void 0,(function*(){var o;const t=null===(o=e.headers.Authorization)||void 0===o?void 0:o.split(" ")[1];return!!t&&!!(yield i.cognitoIdentityServiceProvider.getUser({AccessToken:t}).promise())})),o.isUserAuthenticatedAuthorizer=e=>{const o=e.requestContext.authorizer;return!!o&&!!o.claims},o.unauthorizedResponse={statusCode:401,body:JSON.stringify({error:"Unauthorized"})}},199:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.validateIsraeliID=o.validateIsraeliPhoneNumber=o.validateStringMinLength=o.validateStringMaxLength=o.validateRequest=void 0,o.validateRequest=(e,o)=>{if(!e.body)return{valid:!1,message:"Not valid request body"};const t=JSON.parse(e.body);for(const e in t){const r=t[e],i=o[e];if(i&&!i(r))return{valid:!1,message:`Not valid ${e} - ${r}`}}return{valid:!0}},o.validateStringMaxLength=(e,o)=>e.length<o,o.validateStringMinLength=(e,o)=>e.length>o,o.validateIsraeliPhoneNumber=e=>/^(05)[0-9]{8}$/.test(e),o.validateIsraeliID=e=>!((e=String(e).trim()).length>9)&&(e=e.length<9?("00000000"+e).slice(-9):e,Array.from(e,Number).reduce(((e,o,t)=>{const r=o*(t%2+1);return e+(r>9?r-9:r)}))%10==0)},336:e=>{e.exports=require("aws-sdk")}},o={},t=function t(r){var i=o[r];if(void 0!==i)return i.exports;var n=o[r]={exports:{}};return e[r].call(n.exports,n,n.exports,t),n.exports}(992),r=exports;for(var i in t)r[i]=t[i];t.__esModule&&Object.defineProperty(r,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,