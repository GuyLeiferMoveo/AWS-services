(()=>{"use strict";var e={827:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.createResponse=void 0,o.createResponse=(e,o)=>({statusCode:e,body:JSON.stringify(o)})},743:function(e,o,r){var i=this&&this.__awaiter||function(e,o,r,i){return new(r||(r=Promise))((function(t,n){function l(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){var o;e.done?t(e.value):(o=e.value,o instanceof r?o:new r((function(e){e(o)}))).then(l,s)}c((i=i.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createUserPoolAndAppClient=o.cognitoIdentityServiceProvider=void 0;const t=r(336),n=r(259);o.cognitoIdentityServiceProvider=new t.CognitoIdentityServiceProvider({region:n.cognitoUserPoolRegion,apiVersion:"2016-04-18"}),o.createUserPoolAndAppClient=()=>i(void 0,void 0,void 0,(function*(){try{t.config.update({region:n.cognitoUserPoolRegion});const s=(yield(l=n.cognitoUserPoolName,i(void 0,void 0,void 0,(function*(){var e;try{const r=null===(e=(yield o.cognitoIdentityServiceProvider.listUserPools({MaxResults:10}).promise()).UserPools)||void 0===e?void 0:e.find((e=>e.Name===l));if(!r)throw new Error(`User Pool ${l} wasn't found`);return r.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))))||(yield(e=n.cognitoUserPoolName,i(void 0,void 0,void 0,(function*(){var i;try{const t=Object.assign({PoolName:e,Policies:{PasswordPolicy:{MinimumLength:8,RequireUppercase:!0,RequireLowercase:!0,RequireNumbers:!0,RequireSymbols:!1}}},r);return null===(i=(yield o.cognitoIdentityServiceProvider.createUserPool(t).promise()).UserPool)||void 0===i?void 0:i.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))));if(!s)throw new Error(`User Pool ${n.cognitoUserPoolName} did not found or created`);const c=(yield((e,r)=>i(void 0,void 0,void 0,(function*(){var i;try{const t=null===(i=(yield o.cognitoIdentityServiceProvider.listUserPoolClients({UserPoolId:e}).promise()).UserPoolClients)||void 0===i?void 0:i.find((e=>e.ClientName===r));if(t)return t.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(s,n.cognitoUserPoolAppClientName))||(yield(e=>i(void 0,void 0,void 0,(function*(){var r;try{const i={UserPoolId:e,ClientName:n.cognitoUserPoolAppClientName,GenerateSecret:!1,AllowedOAuthFlowsUserPoolClient:!0,AllowedOAuthFlows:["code","implicit"],AllowedOAuthScopes:["phone","email","openid","profile"],ExplicitAuthFlows:[process.env.AUTH_FLOW_TYPE||"ALLOW_USER_PASSWORD_AUTH"],CallbackURLs:["http://localhost:3000/callback"],LogoutURLs:["http://localhost:3000/logout"]};return null===(r=(yield o.cognitoIdentityServiceProvider.createUserPoolClient(i).promise()).UserPoolClient)||void 0===r?void 0:r.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(s));return{userPoolId:s,appClientId:c}}catch(e){console.error("Error creating User Pool:",e)}var e,r,l}))},259:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.cognitoUserPoolAppClientName=o.cognitoUserPoolRegion=o.cognitoUserPoolId=o.cognitoUserPoolName=void 0,o.cognitoUserPoolName="guyLeifer-skills",o.cognitoUserPoolId="eu-west-1_PsmNFdo3z",o.cognitoUserPoolRegion="eu-west-1",o.cognitoUserPoolAppClientName="guyLeifer-skills-app-client"},212:function(e,o,r){var i=this&&this.__awaiter||function(e,o,r,i){return new(r||(r=Promise))((function(t,n){function l(e){try{c(i.next(e))}catch(e){n(e)}}function s(e){try{c(i.throw(e))}catch(e){n(e)}}function c(e){var o;e.done?t(e.value):(o=e.value,o instanceof r?o:new r((function(e){e(o)}))).then(l,s)}c((i=i.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.handler=void 0;const t=r(743),n=r(827);o.handler=e=>i(void 0,void 0,void 0,(function*(){try{const e=yield(0,t.createUserPoolAndAppClient)();return(0,n.createResponse)(200,{userPoolId:null==e?void 0:e.userPoolId,appClientId:null==e?void 0:e.appClientId})}catch(e){return(0,n.createResponse)(400,{error:e.message})}}))},336:e=>{e.exports=require("aws-sdk")}},o={},r=function r(i){var t=o[i];if(void 0!==t)return t.exports;var n=o[i]={exports:{}};return e[i].call(n.exports,n,n.exports,r),n.exports}(212),i=exports;for(var t in r)i[t]=r[t];r.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,