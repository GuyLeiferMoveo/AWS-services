(()=>{"use strict";var e={827:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.createResponse=void 0,o.createResponse=(e,o)=>({statusCode:e,body:JSON.stringify(o)})},743:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function c(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,c)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createUserPoolAndAppClient=o.cognitoIdentityServiceProvider=void 0;const i=t(336),n=t(259);o.cognitoIdentityServiceProvider=new i.CognitoIdentityServiceProvider({region:n.cognitoUserPoolRegion,apiVersion:"2016-04-18"}),o.createUserPoolAndAppClient=()=>r(void 0,void 0,void 0,(function*(){try{i.config.update({region:n.cognitoUserPoolRegion});const c=(yield(s=n.cognitoUserPoolName,r(void 0,void 0,void 0,(function*(){var e;try{const t=null===(e=(yield o.cognitoIdentityServiceProvider.listUserPools({MaxResults:10}).promise()).UserPools)||void 0===e?void 0:e.find((e=>e.Name===s));if(!t)throw new Error(`User Pool ${s} wasn't found`);return t.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))))||(yield(e=n.cognitoUserPoolName,r(void 0,void 0,void 0,(function*(){var r;try{const i=Object.assign({PoolName:e,Policies:{PasswordPolicy:{MinimumLength:8,RequireUppercase:!0,RequireLowercase:!0,RequireNumbers:!0,RequireSymbols:!1}}},t);return null===(r=(yield o.cognitoIdentityServiceProvider.createUserPool(i).promise()).UserPool)||void 0===r?void 0:r.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))));if(!c)throw new Error(`User Pool ${n.cognitoUserPoolName} did not found or created`);const l=(yield((e,t)=>r(void 0,void 0,void 0,(function*(){var r;try{const i=null===(r=(yield o.cognitoIdentityServiceProvider.listUserPoolClients({UserPoolId:e}).promise()).UserPoolClients)||void 0===r?void 0:r.find((e=>e.ClientName===t));if(i)return i.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(c,n.cognitoUserPoolAppClientName))||(yield(e=>r(void 0,void 0,void 0,(function*(){var t;try{const r={UserPoolId:e,ClientName:n.cognitoUserPoolAppClientName,GenerateSecret:!1,AllowedOAuthFlowsUserPoolClient:!0,AllowedOAuthFlows:["code","implicit"],AllowedOAuthScopes:["phone","email","openid","profile"],ExplicitAuthFlows:[process.env.AUTH_FLOW_TYPE||"ALLOW_USER_PASSWORD_AUTH"],CallbackURLs:["http://localhost:3000/callback"],LogoutURLs:["http://localhost:3000/logout"]};return null===(t=(yield o.cognitoIdentityServiceProvider.createUserPoolClient(r).promise()).UserPoolClient)||void 0===t?void 0:t.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(c));return{userPoolId:c,appClientId:l}}catch(e){console.error("Error creating User Pool:",e)}var e,t,s}))},259:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.cognitoUserPoolAppClientName=o.cognitoUserPoolRegion=o.cognitoUserPoolId=o.cognitoUserPoolName=void 0,o.cognitoUserPoolName="guyLeifer-skills",o.cognitoUserPoolId="eu-west-1_PsmNFdo3z",o.cognitoUserPoolRegion="eu-west-1",o.cognitoUserPoolAppClientName="guyLeifer-skills-app-client"},583:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function c(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,c)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createTableIfNotExists=o.dynamoDb=void 0;const i=t(336);o.dynamoDb=new i.DynamoDB.DocumentClient({region:"il-central-1"});const n=new i.DynamoDB;o.createTableIfNotExists=()=>r(void 0,void 0,void 0,(function*(){var e;try{if(null===(e=(yield n.listTables().promise()).TableNames)||void 0===e?void 0:e.includes(process.env.DB_TABLE_NAME||"users"))return void console.log(`Table ${process.env.DB_TABLE_NAME} already exists.`);const o={TableName:process.env.DB_TABLE_NAME||"users",KeySchema:[{AttributeName:"userId",KeyType:"HASH"}],AttributeDefinitions:[{AttributeName:"userId",AttributeType:"S"}],ProvisionedThroughput:{ReadCapacityUnits:5,WriteCapacityUnits:5}},t=yield n.createTable(o).promise();return console.log(`Table ${process.env.DB_TABLE_NAME} created successfully.`),t}catch(e){console.error("Error creating table:",e)}}))},560:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function c(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,c)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.handler=void 0;const i=t(583),n=t(44),s=t(827);o.handler=e=>r(void 0,void 0,void 0,(function*(){if(!(yield(0,n.isUserAuthenticated)(e)))return n.unauthorizedResponse;try{const o=e.queryStringParameters?e.queryStringParameters.userId:"",t={TableName:process.env.DB_TABLE_NAME||"",Key:{userId:o}},r=yield i.dynamoDb.get(t).promise();return(0,s.createResponse)(200,r.Item||{})}catch(e){return(0,s.createResponse)(500,{error:e.message})}}))},44:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function c(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,c)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.unauthorizedResponse=o.isUserAuthenticatedAuthorizer=o.isUserAuthenticated=void 0;const i=t(743);o.isUserAuthenticated=e=>r(void 0,void 0,void 0,(function*(){var o;const t=null===(o=e.headers.Authorization)||void 0===o?void 0:o.split(" ")[1];return!!t&&!!(yield i.cognitoIdentityServiceProvider.getUser({AccessToken:t}).promise())})),o.isUserAuthenticatedAuthorizer=e=>{const o=e.requestContext.authorizer;return!!o&&!!o.claims},o.unauthorizedResponse={statusCode:401,body:JSON.stringify({error:"Unauthorized"})}},336:e=>{e.exports=require("aws-sdk")}},o={},t=function t(r){var i=o[r];if(void 0!==i)return i.exports;var n=o[r]={exports:{}};return e[r].call(n.exports,n,n.exports,t),n.exports}(560),r=exports;for(var i in t)r[i]=t[i];t.__esModule&&Object.defineProperty(r,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,