(()=>{"use strict";var e={827:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.createResponse=void 0,o.createResponse=(e,o)=>({statusCode:e,body:JSON.stringify(o)})},743:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,a)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createUserPoolAndAppClient=o.cognitoIdentityServiceProvider=void 0;const i=t(336),n=t(259);o.cognitoIdentityServiceProvider=new i.CognitoIdentityServiceProvider({region:n.cognitoUserPoolRegion,apiVersion:"2016-04-18"}),o.createUserPoolAndAppClient=()=>r(void 0,void 0,void 0,(function*(){try{i.config.update({region:n.cognitoUserPoolRegion});const a=(yield(s=n.cognitoUserPoolName,r(void 0,void 0,void 0,(function*(){var e;try{const t=null===(e=(yield o.cognitoIdentityServiceProvider.listUserPools({MaxResults:10}).promise()).UserPools)||void 0===e?void 0:e.find((e=>e.Name===s));if(!t)throw new Error(`User Pool ${s} wasn't found`);return t.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))))||(yield(e=n.cognitoUserPoolName,r(void 0,void 0,void 0,(function*(){var r;try{const i=Object.assign({PoolName:e,Policies:{PasswordPolicy:{MinimumLength:8,RequireUppercase:!0,RequireLowercase:!0,RequireNumbers:!0,RequireSymbols:!1}}},t);return null===(r=(yield o.cognitoIdentityServiceProvider.createUserPool(i).promise()).UserPool)||void 0===r?void 0:r.Id}catch(e){return void console.error("Error checking for existing User Pool:",e)}}))));if(!a)throw new Error(`User Pool ${n.cognitoUserPoolName} did not found or created`);const l=(yield((e,t)=>r(void 0,void 0,void 0,(function*(){var r;try{const i=null===(r=(yield o.cognitoIdentityServiceProvider.listUserPoolClients({UserPoolId:e}).promise()).UserPoolClients)||void 0===r?void 0:r.find((e=>e.ClientName===t));if(i)return i.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(a,n.cognitoUserPoolAppClientName))||(yield(e=>r(void 0,void 0,void 0,(function*(){var t;try{const r={UserPoolId:e,ClientName:n.cognitoUserPoolAppClientName,GenerateSecret:!1,AllowedOAuthFlowsUserPoolClient:!0,AllowedOAuthFlows:["code","implicit"],AllowedOAuthScopes:["phone","email","openid","profile"],ExplicitAuthFlows:[process.env.AUTH_FLOW_TYPE||"ALLOW_USER_PASSWORD_AUTH"],CallbackURLs:["http://localhost:3000/callback"],LogoutURLs:["http://localhost:3000/logout"]};return null===(t=(yield o.cognitoIdentityServiceProvider.createUserPoolClient(r).promise()).UserPoolClient)||void 0===t?void 0:t.ClientId}catch(e){return void console.error("Error checking for existing User Pool:",e)}})))(a));return{userPoolId:a,appClientId:l}}catch(e){console.error("Error creating User Pool:",e)}var e,t,s}))},259:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.cognitoUserPoolAppClientName=o.cognitoUserPoolRegion=o.cognitoUserPoolId=o.cognitoUserPoolName=void 0,o.cognitoUserPoolName="guyLeifer-skills",o.cognitoUserPoolId="eu-west-1_PsmNFdo3z",o.cognitoUserPoolRegion="eu-west-1",o.cognitoUserPoolAppClientName="guyLeifer-skills-app-client"},583:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,a)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.createTableIfNotExists=o.dynamoDb=void 0;const i=t(336);o.dynamoDb=new i.DynamoDB.DocumentClient({region:"il-central-1"});const n=new i.DynamoDB;o.createTableIfNotExists=()=>r(void 0,void 0,void 0,(function*(){var e;try{if(null===(e=(yield n.listTables().promise()).TableNames)||void 0===e?void 0:e.includes(process.env.DB_TABLE_NAME||"users"))return void console.log(`Table ${process.env.DB_TABLE_NAME} already exists.`);const o={TableName:process.env.DB_TABLE_NAME||"users",KeySchema:[{AttributeName:"userId",KeyType:"HASH"}],AttributeDefinitions:[{AttributeName:"userId",AttributeType:"S"}],ProvisionedThroughput:{ReadCapacityUnits:5,WriteCapacityUnits:5}},t=yield n.createTable(o).promise();return console.log(`Table ${process.env.DB_TABLE_NAME} created successfully.`),t}catch(e){console.error("Error creating table:",e)}}))},2:function(e,o,t){var r=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(i,n){function s(e){try{l(r.next(e))}catch(e){n(e)}}function a(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var o;e.done?i(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,a)}l((r=r.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.handler=void 0;const i=t(743),n=t(583),s=t(199),a=t(827);o.handler=e=>r(void 0,void 0,void 0,(function*(){try{const{valid:o,message:t}=(0,s.validateRequest)(e,l);if(!o)throw new Error(t);const r=JSON.parse(e.body),{firstName:c,lastName:d,email:u,password:v,phoneNumber:p,userId:g}=r,f="+972".concat(p.substr(1)),m={ClientId:process.env.APP_CLIENT_ID||"",Password:v,Username:g,UserAttributes:[{Name:"email",Value:u}]},P=(yield i.cognitoIdentityServiceProvider.signUp(m).promise(),{TableName:process.env.DB_TABLE_NAME||"",Item:{id:g,firstName:c,lastName:d,email:u,password:v,phoneNumber:f,userId:g}});return yield n.dynamoDb.put(P).promise(),(0,a.createResponse)(201,P.Item.userId)}catch(e){return(0,a.createResponse)(400,{error:e.message})}}));const l={firstName:e=>(0,s.validateStringMaxLength)(e,20),lastName:e=>(0,s.validateStringMaxLength)(e,20),password:e=>(0,s.validateStringMaxLength)(e,20),phoneNumber:e=>(0,s.validateIsraeliPhoneNumber)(e),userId:e=>(0,s.validateIsraeliID)(e)}},199:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.validateIsraeliID=o.validateIsraeliPhoneNumber=o.validateStringMinLength=o.validateStringMaxLength=o.validateRequest=void 0,o.validateRequest=(e,o)=>{if(!e.body)return{valid:!1,message:"Not valid request body"};const t=JSON.parse(e.body);for(const e in t){const r=t[e],i=o[e];if(i&&!i(r))return{valid:!1,message:`Not valid ${e} - ${r}`}}return{valid:!0}},o.validateStringMaxLength=(e,o)=>e.length<o,o.validateStringMinLength=(e,o)=>e.length>o,o.validateIsraeliPhoneNumber=e=>/^(05)[0-9]{8}$/.test(e),o.validateIsraeliID=e=>!((e=String(e).trim()).length>9)&&(e=e.length<9?("00000000"+e).slice(-9):e,Array.from(e,Number).reduce(((e,o,t)=>{const r=o*(t%2+1);return e+(r>9?r-9:r)}))%10==0)},336:e=>{e.exports=require("aws-sdk")}},o={},t=function t(r){var i=o[r];if(void 0!==i)return i.exports;var n=o[r]={exports:{}};return e[r].call(n.exports,n,n.exports,t),n.exports}(2),r=exports;for(var i in t)r[i]=t[i];t.__esModule&&Object.defineProperty(r,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUlXLFFBQ1RILE9BQVMsS0FFaEJSLEVBQUtBLEVBQUdRLE9BQVMsR0FBSyxXQUFhUixHQUFJWSxPQUFPLEdBQUtaLEVBQzNDYSxNQUFNQyxLQUFLZCxFQUFJZSxRQUFRQyxRQUFPLENBQUNDLEVBQVNDLEVBQU9DLEtBQ25ELE1BQU1sSixFQUFPaUosR0FBVUMsRUFBSSxFQUFLLEdBQ2hDLE9BQU9GLEdBQVdoSixFQUFPLEVBQUlBLEVBQU8sRUFBSUEsRUFBSyxJQUU3QyxJQUNBLEUsVUNuQ1JtSixFQUFPcEssUUFBVXFLLFFBQVEsVSxHQ0NyQkMsRUFBMkIsQ0FBQyxFQ0U1QkMsRURDSixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUosRUFBeUJHLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhMUssUUFHckIsSUFBSW9LLEVBQVNFLEVBQXlCRyxHQUFZLENBR2pEekssUUFBUyxDQUFDLEdBT1gsT0FIQTRLLEVBQW9CSCxHQUFVSSxLQUFLVCxFQUFPcEssUUFBU29LLEVBQVFBLEVBQU9wSyxRQUFTd0ssR0FHcEVKLEVBQU9wSyxPQUNmLENDbkIwQndLLENBQW9CLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maW50ZWthLy4vYXdzLWNvbmZpZy9hcGlHZXR3YXkudHMiLCJ3ZWJwYWNrOi8vZmludGVrYS8uL2F3cy1jb25maWcvY29nbml0by50cyIsIndlYnBhY2s6Ly9maW50ZWthLy4vYXdzLWNvbmZpZy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vZmludGVrYS8uL2F3cy1jb25maWcvZHluYW1vREIudHMiLCJ3ZWJwYWNrOi8vZmludGVrYS8uL3Bvc3RVc2VyL2luZGV4LnRzIiwid2VicGFjazovL2ZpbnRla2EvLi91dGlscy92YWxpZGF0aW9ucy50cyIsIndlYnBhY2s6Ly9maW50ZWthL2V4dGVybmFsIGNvbW1vbmpzIFwiYXdzLXNka1wiIiwid2VicGFjazovL2ZpbnRla2Evd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZmludGVrYS93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZVJlc3BvbnNlID0gdm9pZCAwO1xuY29uc3QgY3JlYXRlUmVzcG9uc2UgPSAoc3RhdHVzQ29kZSwgYm9keSkgPT4gKHtcbiAgICBzdGF0dXNDb2RlLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxufSk7XG5leHBvcnRzLmNyZWF0ZVJlc3BvbnNlID0gY3JlYXRlUmVzcG9uc2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVVc2VyUG9vbEFuZEFwcENsaWVudCA9IGV4cG9ydHMuY29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgYXdzX3Nka18xID0gcmVxdWlyZShcImF3cy1zZGtcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmV4cG9ydHMuY29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyID0gbmV3IGF3c19zZGtfMS5Db2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIoe1xuICAgIHJlZ2lvbjogY29uc3RhbnRzXzEuY29nbml0b1VzZXJQb29sUmVnaW9uLFxuICAgIGFwaVZlcnNpb246IFwiMjAxNi0wNC0xOFwiLFxufSk7XG5jb25zdCBjaGVja0lmVXNlclBvbGxFeGlzdHMgPSAoY29nbml0b1VzZXJQb29sTmFtZSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIF9hO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxpc3RVc2VyUG9vbHNSZXNwb25zZSA9IHlpZWxkIGV4cG9ydHMuY29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyXG4gICAgICAgICAgICAubGlzdFVzZXJQb29scyh7IE1heFJlc3VsdHM6IDEwIH0pXG4gICAgICAgICAgICAucHJvbWlzZSgpO1xuICAgICAgICBjb25zdCBleGlzdGluZ1VzZXJQb29sID0gKF9hID0gbGlzdFVzZXJQb29sc1Jlc3BvbnNlLlVzZXJQb29scykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZpbmQoKHBvb2wpID0+IHBvb2wuTmFtZSA9PT0gY29nbml0b1VzZXJQb29sTmFtZSk7XG4gICAgICAgIGlmICghZXhpc3RpbmdVc2VyUG9vbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVXNlciBQb29sICR7Y29nbml0b1VzZXJQb29sTmFtZX0gd2Fzbid0IGZvdW5kYCk7XG4gICAgICAgIHJldHVybiBleGlzdGluZ1VzZXJQb29sLklkO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNoZWNraW5nIGZvciBleGlzdGluZyBVc2VyIFBvb2w6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbn0pO1xuY29uc3QgY3JlYXRlVXNlclBvb2wgPSAoUG9vbE5hbWUsIFVzZXJuYW1lQXR0cmlidXRlcykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIF9iO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVzZXJQb29sUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7IFBvb2xOYW1lLCBQb2xpY2llczoge1xuICAgICAgICAgICAgICAgIFBhc3N3b3JkUG9saWN5OiB7XG4gICAgICAgICAgICAgICAgICAgIE1pbmltdW1MZW5ndGg6IDgsXG4gICAgICAgICAgICAgICAgICAgIFJlcXVpcmVVcHBlcmNhc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFJlcXVpcmVMb3dlcmNhc2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFJlcXVpcmVOdW1iZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBSZXF1aXJlU3ltYm9sczogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gfSwgKFVzZXJuYW1lQXR0cmlidXRlcyAmJiB7IFVzZXJuYW1lQXR0cmlidXRlcyB9KSk7XG4gICAgICAgIGNvbnN0IHVzZXJQb29sUmVzcG9uc2UgPSB5aWVsZCBleHBvcnRzLmNvZ25pdG9JZGVudGl0eVNlcnZpY2VQcm92aWRlclxuICAgICAgICAgICAgLmNyZWF0ZVVzZXJQb29sKHVzZXJQb29sUGFyYW1zKVxuICAgICAgICAgICAgLnByb21pc2UoKTtcbiAgICAgICAgY29uc3QgdXNlclBvb2xJZCA9IChfYiA9IHVzZXJQb29sUmVzcG9uc2UuVXNlclBvb2wpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5JZDtcbiAgICAgICAgcmV0dXJuIHVzZXJQb29sSWQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY2hlY2tpbmcgZm9yIGV4aXN0aW5nIFVzZXIgUG9vbDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufSk7XG5jb25zdCBjaGVja0lmVXNlclBvbGxBcHBDbGllbnRFeGlzdHMgPSAodXNlclBvb2xJZCwgYXBwQ2xpZW50TmFtZSkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIF9jO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGxpc3RVc2VyUG9vbENsaWVudHNSZXNwb25zZSA9IHlpZWxkIGV4cG9ydHMuY29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyXG4gICAgICAgICAgICAubGlzdFVzZXJQb29sQ2xpZW50cyh7IFVzZXJQb29sSWQ6IHVzZXJQb29sSWQgfSlcbiAgICAgICAgICAgIC5wcm9taXNlKCk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQXBwQ2xpZW50ID0gKF9jID0gbGlzdFVzZXJQb29sQ2xpZW50c1Jlc3BvbnNlLlVzZXJQb29sQ2xpZW50cykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmZpbmQoKGNsaWVudCkgPT4gY2xpZW50LkNsaWVudE5hbWUgPT09IGFwcENsaWVudE5hbWUpO1xuICAgICAgICBpZiAoZXhpc3RpbmdBcHBDbGllbnQpXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBcHBDbGllbnQuQ2xpZW50SWQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY2hlY2tpbmcgZm9yIGV4aXN0aW5nIFVzZXIgUG9vbDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufSk7XG5jb25zdCBjcmVhdGVVc2VyUG9vbEFwcENsaWVudCA9ICh1c2VyUG9vbElkKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB2YXIgX2Q7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYXBwQ2xpZW50UGFyYW1zID0ge1xuICAgICAgICAgICAgVXNlclBvb2xJZDogdXNlclBvb2xJZCxcbiAgICAgICAgICAgIENsaWVudE5hbWU6IGNvbnN0YW50c18xLmNvZ25pdG9Vc2VyUG9vbEFwcENsaWVudE5hbWUsXG4gICAgICAgICAgICBHZW5lcmF0ZVNlY3JldDogZmFsc2UsXG4gICAgICAgICAgICBBbGxvd2VkT0F1dGhGbG93c1VzZXJQb29sQ2xpZW50OiB0cnVlLFxuICAgICAgICAgICAgQWxsb3dlZE9BdXRoRmxvd3M6IFtcImNvZGVcIiwgXCJpbXBsaWNpdFwiXSxcbiAgICAgICAgICAgIEFsbG93ZWRPQXV0aFNjb3BlczogW1wicGhvbmVcIiwgXCJlbWFpbFwiLCBcIm9wZW5pZFwiLCBcInByb2ZpbGVcIl0sXG4gICAgICAgICAgICBFeHBsaWNpdEF1dGhGbG93czogW1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkFVVEhfRkxPV19UWVBFIHx8IFwiQUxMT1dfVVNFUl9QQVNTV09SRF9BVVRIXCIsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgQ2FsbGJhY2tVUkxzOiBbXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvY2FsbGJhY2tcIl0sXG4gICAgICAgICAgICBMb2dvdXRVUkxzOiBbXCJodHRwOi8vbG9jYWxob3N0OjMwMDAvbG9nb3V0XCJdLCAvLyBSZXBsYWNlIHdpdGggeW91ciBsb2dvdXQgVVJMc1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBhcHBDbGllbnRSZXNwb25zZSA9IHlpZWxkIGV4cG9ydHMuY29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyXG4gICAgICAgICAgICAuY3JlYXRlVXNlclBvb2xDbGllbnQoYXBwQ2xpZW50UGFyYW1zKVxuICAgICAgICAgICAgLnByb21pc2UoKTtcbiAgICAgICAgY29uc3QgYXBwQ2xpZW50SWQgPSAoX2QgPSBhcHBDbGllbnRSZXNwb25zZS5Vc2VyUG9vbENsaWVudCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLkNsaWVudElkO1xuICAgICAgICByZXR1cm4gYXBwQ2xpZW50SWQ7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY2hlY2tpbmcgZm9yIGV4aXN0aW5nIFVzZXIgUG9vbDpcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxufSk7XG5jb25zdCBjcmVhdGVVc2VyUG9vbEFuZEFwcENsaWVudCA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGF3c19zZGtfMS5jb25maWcudXBkYXRlKHsgcmVnaW9uOiBjb25zdGFudHNfMS5jb2duaXRvVXNlclBvb2xSZWdpb24gfSk7XG4gICAgICAgIGNvbnN0IHVzZXJQb29sSWQgPSAoeWllbGQgY2hlY2tJZlVzZXJQb2xsRXhpc3RzKGNvbnN0YW50c18xLmNvZ25pdG9Vc2VyUG9vbE5hbWUpKSB8fFxuICAgICAgICAgICAgKHlpZWxkIGNyZWF0ZVVzZXJQb29sKGNvbnN0YW50c18xLmNvZ25pdG9Vc2VyUG9vbE5hbWUpKTtcbiAgICAgICAgaWYgKCF1c2VyUG9vbElkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVc2VyIFBvb2wgJHtjb25zdGFudHNfMS5jb2duaXRvVXNlclBvb2xOYW1lfSBkaWQgbm90IGZvdW5kIG9yIGNyZWF0ZWRgKTtcbiAgICAgICAgY29uc3QgYXBwQ2xpZW50SWQgPSAoeWllbGQgY2hlY2tJZlVzZXJQb2xsQXBwQ2xpZW50RXhpc3RzKHVzZXJQb29sSWQsIGNvbnN0YW50c18xLmNvZ25pdG9Vc2VyUG9vbEFwcENsaWVudE5hbWUpKSB8fCAoeWllbGQgY3JlYXRlVXNlclBvb2xBcHBDbGllbnQodXNlclBvb2xJZCkpO1xuICAgICAgICByZXR1cm4geyB1c2VyUG9vbElkLCBhcHBDbGllbnRJZCB9O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNyZWF0aW5nIFVzZXIgUG9vbDpcIiwgZXJyb3IpO1xuICAgIH1cbn0pO1xuZXhwb3J0cy5jcmVhdGVVc2VyUG9vbEFuZEFwcENsaWVudCA9IGNyZWF0ZVVzZXJQb29sQW5kQXBwQ2xpZW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvZ25pdG9Vc2VyUG9vbEFwcENsaWVudE5hbWUgPSBleHBvcnRzLmNvZ25pdG9Vc2VyUG9vbFJlZ2lvbiA9IGV4cG9ydHMuY29nbml0b1VzZXJQb29sSWQgPSBleHBvcnRzLmNvZ25pdG9Vc2VyUG9vbE5hbWUgPSB2b2lkIDA7XG5leHBvcnRzLmNvZ25pdG9Vc2VyUG9vbE5hbWUgPSBcImd1eUxlaWZlci1za2lsbHNcIjtcbmV4cG9ydHMuY29nbml0b1VzZXJQb29sSWQgPSBcImV1LXdlc3QtMV9Qc21ORmRvM3pcIjtcbmV4cG9ydHMuY29nbml0b1VzZXJQb29sUmVnaW9uID0gXCJldS13ZXN0LTFcIjtcbmV4cG9ydHMuY29nbml0b1VzZXJQb29sQXBwQ2xpZW50TmFtZSA9IFwiZ3V5TGVpZmVyLXNraWxscy1hcHAtY2xpZW50XCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVUYWJsZUlmTm90RXhpc3RzID0gZXhwb3J0cy5keW5hbW9EYiA9IHZvaWQgMDtcbmNvbnN0IGF3c19zZGtfMSA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuZXhwb3J0cy5keW5hbW9EYiA9IG5ldyBhd3Nfc2RrXzEuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoeyByZWdpb246IFwiaWwtY2VudHJhbC0xXCIgfSk7XG5jb25zdCBkeW5hbW9EQlNlcnZpY2UgPSBuZXcgYXdzX3Nka18xLkR5bmFtb0RCKCk7IC8vIENyZWF0ZSBhIER5bmFtb0RCIHNlcnZpY2UgY2xpZW50XG5jb25zdCBjcmVhdGVUYWJsZUlmTm90RXhpc3RzID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIF9hO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nVGFibGVzID0geWllbGQgZHluYW1vREJTZXJ2aWNlLmxpc3RUYWJsZXMoKS5wcm9taXNlKCk7XG4gICAgICAgIGlmICgoX2EgPSBleGlzdGluZ1RhYmxlcy5UYWJsZU5hbWVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jbHVkZXMocHJvY2Vzcy5lbnYuREJfVEFCTEVfTkFNRSB8fCBcInVzZXJzXCIpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVGFibGUgJHtwcm9jZXNzLmVudi5EQl9UQUJMRV9OQU1FfSBhbHJlYWR5IGV4aXN0cy5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkRCX1RBQkxFX05BTUUgfHwgXCJ1c2Vyc1wiLFxuICAgICAgICAgICAgS2V5U2NoZW1hOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBBdHRyaWJ1dGVOYW1lOiBcInVzZXJJZFwiLFxuICAgICAgICAgICAgICAgICAgICBLZXlUeXBlOiBcIkhBU0hcIiwgLy8gUGFydGl0aW9uIGtleVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgQXR0cmlidXRlRGVmaW5pdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIEF0dHJpYnV0ZU5hbWU6IFwidXNlcklkXCIsXG4gICAgICAgICAgICAgICAgICAgIEF0dHJpYnV0ZVR5cGU6IFwiU1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgUHJvdmlzaW9uZWRUaHJvdWdocHV0OiB7XG4gICAgICAgICAgICAgICAgUmVhZENhcGFjaXR5VW5pdHM6IDUsXG4gICAgICAgICAgICAgICAgV3JpdGVDYXBhY2l0eVVuaXRzOiA1LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdGFibGUgPSB5aWVsZCBkeW5hbW9EQlNlcnZpY2UuY3JlYXRlVGFibGUocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBUYWJsZSAke3Byb2Nlc3MuZW52LkRCX1RBQkxFX05BTUV9IGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5LmApO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgdGFibGU6XCIsIGVycm9yKTtcbiAgICB9XG59KTtcbmV4cG9ydHMuY3JlYXRlVGFibGVJZk5vdEV4aXN0cyA9IGNyZWF0ZVRhYmxlSWZOb3RFeGlzdHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYW5kbGVyID0gdm9pZCAwO1xuY29uc3QgY29nbml0b18xID0gcmVxdWlyZShcIi4uL2F3cy1jb25maWcvY29nbml0b1wiKTtcbmNvbnN0IGR5bmFtb0RCXzEgPSByZXF1aXJlKFwiLi4vYXdzLWNvbmZpZy9keW5hbW9EQlwiKTtcbmNvbnN0IHZhbGlkYXRpb25zXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvdmFsaWRhdGlvbnNcIik7XG5jb25zdCBhcGlHZXR3YXlfMSA9IHJlcXVpcmUoXCIuLi9hd3MtY29uZmlnL2FwaUdldHdheVwiKTtcbmNvbnN0IGhhbmRsZXIgPSAoZXZlbnQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgdmFsaWQsIG1lc3NhZ2UgfSA9ICgwLCB2YWxpZGF0aW9uc18xLnZhbGlkYXRlUmVxdWVzdCkoZXZlbnQsIHZhbGlkYXRpb25zKTtcbiAgICAgICAgaWYgKCF2YWxpZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdEJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuICAgICAgICBjb25zdCB7IGZpcnN0TmFtZSwgbGFzdE5hbWUsIGVtYWlsLCBwYXNzd29yZCwgcGhvbmVOdW1iZXIsIHVzZXJJZCB9ID0gcmVxdWVzdEJvZHk7XG4gICAgICAgIGNvbnN0IHBob25lTnVtYmVyV2l0aENvdW50cnlDb2RlID0gXCIrOTcyXCIuY29uY2F0KHBob25lTnVtYmVyLnN1YnN0cigxKSk7XG4gICAgICAgIC8vIENyZWF0ZSBwYXJhbXMgZm9yIHNpZ25VcCBtZXRob2RcbiAgICAgICAgY29uc3QgcGFyYW1zRm9yQ29nbml0byA9IHtcbiAgICAgICAgICAgIENsaWVudElkOiBwcm9jZXNzLmVudi5BUFBfQ0xJRU5UX0lEIHx8IFwiXCIsXG4gICAgICAgICAgICBQYXNzd29yZDogcGFzc3dvcmQsXG4gICAgICAgICAgICBVc2VybmFtZTogdXNlcklkLFxuICAgICAgICAgICAgVXNlckF0dHJpYnV0ZXM6IFtcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBOYW1lOiBcImZhbWlseV9uYW1lXCIsXG4gICAgICAgICAgICAgICAgLy8gICBWYWx1ZTogbGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIE5hbWU6IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgICAgVmFsdWU6IGVtYWlsLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgTmFtZTogXCJnaXZlbl9uYW1lXCIsXG4gICAgICAgICAgICAgICAgLy8gICBWYWx1ZTogZmlyc3ROYW1lLFxuICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgTmFtZTogXCJwaG9uZV9udW1iZXJcIixcbiAgICAgICAgICAgICAgICAvLyAgIFZhbHVlOiBwaG9uZU51bWJlcldpdGhDb3VudHJ5Q29kZSxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIE5hbWU6IFwiY3VzdG9tOnVzZXJfaWRcIixcbiAgICAgICAgICAgICAgICAvLyAgIFZhbHVlOiB1c2VySWQsXG4gICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHVzZXIgPSB5aWVsZCBjb2duaXRvXzEuY29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyXG4gICAgICAgICAgICAuc2lnblVwKHBhcmFtc0ZvckNvZ25pdG8pXG4gICAgICAgICAgICAucHJvbWlzZSgpO1xuICAgICAgICBjb25zdCBwYXJhbXNGb3JEREIgPSB7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkRCX1RBQkxFX05BTUUgfHwgXCJcIixcbiAgICAgICAgICAgIEl0ZW06IHtcbiAgICAgICAgICAgICAgICBpZDogdXNlcklkLFxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZSxcbiAgICAgICAgICAgICAgICBsYXN0TmFtZSxcbiAgICAgICAgICAgICAgICBlbWFpbCxcbiAgICAgICAgICAgICAgICBwYXNzd29yZCxcbiAgICAgICAgICAgICAgICBwaG9uZU51bWJlcjogcGhvbmVOdW1iZXJXaXRoQ291bnRyeUNvZGUsXG4gICAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgeWllbGQgZHluYW1vREJfMS5keW5hbW9EYi5wdXQocGFyYW1zRm9yRERCKS5wcm9taXNlKCk7XG4gICAgICAgIHJldHVybiAoMCwgYXBpR2V0d2F5XzEuY3JlYXRlUmVzcG9uc2UpKDIwMSwgcGFyYW1zRm9yRERCLkl0ZW0udXNlcklkKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAoMCwgYXBpR2V0d2F5XzEuY3JlYXRlUmVzcG9uc2UpKDQwMCwgeyBlcnJvcjogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG59KTtcbmV4cG9ydHMuaGFuZGxlciA9IGhhbmRsZXI7XG5jb25zdCB2YWxpZGF0aW9ucyA9IHtcbiAgICBmaXJzdE5hbWU6ICh2YWx1ZSkgPT4gKDAsIHZhbGlkYXRpb25zXzEudmFsaWRhdGVTdHJpbmdNYXhMZW5ndGgpKHZhbHVlLCAyMCksXG4gICAgbGFzdE5hbWU6ICh2YWx1ZSkgPT4gKDAsIHZhbGlkYXRpb25zXzEudmFsaWRhdGVTdHJpbmdNYXhMZW5ndGgpKHZhbHVlLCAyMCksXG4gICAgcGFzc3dvcmQ6ICh2YWx1ZSkgPT4gKDAsIHZhbGlkYXRpb25zXzEudmFsaWRhdGVTdHJpbmdNYXhMZW5ndGgpKHZhbHVlLCAyMCksXG4gICAgcGhvbmVOdW1iZXI6ICh2YWx1ZSkgPT4gKDAsIHZhbGlkYXRpb25zXzEudmFsaWRhdGVJc3JhZWxpUGhvbmVOdW1iZXIpKHZhbHVlKSxcbiAgICB1c2VySWQ6ICh2YWx1ZSkgPT4gKDAsIHZhbGlkYXRpb25zXzEudmFsaWRhdGVJc3JhZWxpSUQpKHZhbHVlKSxcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVJc3JhZWxpSUQgPSBleHBvcnRzLnZhbGlkYXRlSXNyYWVsaVBob25lTnVtYmVyID0gZXhwb3J0cy52YWxpZGF0ZVN0cmluZ01pbkxlbmd0aCA9IGV4cG9ydHMudmFsaWRhdGVTdHJpbmdNYXhMZW5ndGggPSBleHBvcnRzLnZhbGlkYXRlUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IHZhbGlkYXRlUmVxdWVzdCA9IChldmVudCwgdmFsaWRhdGlvbnMpID0+IHtcbiAgICBpZiAoIWV2ZW50LmJvZHkpXG4gICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgbWVzc2FnZTogXCJOb3QgdmFsaWQgcmVxdWVzdCBib2R5XCIgfTtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IEpTT04ucGFyc2UoZXZlbnQuYm9keSk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmVxdWVzdEJvZHkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZXF1ZXN0Qm9keVtrZXldO1xuICAgICAgICBjb25zdCB2YWxpZGF0aW9uRnVuY3Rpb24gPSB2YWxpZGF0aW9uc1trZXldO1xuICAgICAgICBpZiAodmFsaWRhdGlvbkZ1bmN0aW9uICYmICF2YWxpZGF0aW9uRnVuY3Rpb24odmFsdWUpKVxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBtZXNzYWdlOiBgTm90IHZhbGlkICR7a2V5fSAtICR7dmFsdWV9YCB9O1xuICAgIH1cbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSB9O1xufTtcbmV4cG9ydHMudmFsaWRhdGVSZXF1ZXN0ID0gdmFsaWRhdGVSZXF1ZXN0O1xuY29uc3QgdmFsaWRhdGVTdHJpbmdNYXhMZW5ndGggPSAodmFsdWUsIGxlbmd0aCkgPT4gdmFsdWUubGVuZ3RoIDwgbGVuZ3RoO1xuZXhwb3J0cy52YWxpZGF0ZVN0cmluZ01heExlbmd0aCA9IHZhbGlkYXRlU3RyaW5nTWF4TGVuZ3RoO1xuY29uc3QgdmFsaWRhdGVTdHJpbmdNaW5MZW5ndGggPSAodmFsdWUsIGxlbmd0aCkgPT4gdmFsdWUubGVuZ3RoID4gbGVuZ3RoO1xuZXhwb3J0cy52YWxpZGF0ZVN0cmluZ01pbkxlbmd0aCA9IHZhbGlkYXRlU3RyaW5nTWluTGVuZ3RoO1xuY29uc3QgdmFsaWRhdGVJc3JhZWxpUGhvbmVOdW1iZXIgPSAocGhvbmVOdW1iZXIpID0+IHtcbiAgICBjb25zdCBwaG9uZVJlZ2V4ID0gL14oMDUpWzAtOV17OH0kLztcbiAgICByZXR1cm4gcGhvbmVSZWdleC50ZXN0KHBob25lTnVtYmVyKTtcbn07XG5leHBvcnRzLnZhbGlkYXRlSXNyYWVsaVBob25lTnVtYmVyID0gdmFsaWRhdGVJc3JhZWxpUGhvbmVOdW1iZXI7XG5jb25zdCB2YWxpZGF0ZUlzcmFlbGlJRCA9IChpZCkgPT4ge1xuICAgIGlkID0gU3RyaW5nKGlkKS50cmltKCk7XG4gICAgaWYgKGlkLmxlbmd0aCA+IDkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZCA9IGlkLmxlbmd0aCA8IDkgPyAoXCIwMDAwMDAwMFwiICsgaWQpLnNsaWNlKC05KSA6IGlkO1xuICAgIHJldHVybiAoQXJyYXkuZnJvbShpZCwgTnVtYmVyKS5yZWR1Y2UoKGNvdW50ZXIsIGRpZ2l0LCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSBkaWdpdCAqICgoaSAlIDIpICsgMSk7XG4gICAgICAgIHJldHVybiBjb3VudGVyICsgKHN0ZXAgPiA5ID8gc3RlcCAtIDkgOiBzdGVwKTtcbiAgICB9KSAlXG4gICAgICAgIDEwID09PVxuICAgICAgICAwKTtcbn07XG5leHBvcnRzLnZhbGlkYXRlSXNyYWVsaUlEID0gdmFsaWRhdGVJc3JhZWxpSUQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcmVhdGVSZXNwb25zZSIsInN0YXR1c0NvZGUiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIl9fYXdhaXRlciIsInRoaXMiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsImNyZWF0ZVVzZXJQb29sQW5kQXBwQ2xpZW50IiwiY29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyIiwiYXdzX3Nka18xIiwiY29uc3RhbnRzXzEiLCJDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIiLCJyZWdpb24iLCJjb2duaXRvVXNlclBvb2xSZWdpb24iLCJhcGlWZXJzaW9uIiwiY29uZmlnIiwidXBkYXRlIiwidXNlclBvb2xJZCIsImNvZ25pdG9Vc2VyUG9vbE5hbWUiLCJfYSIsImV4aXN0aW5nVXNlclBvb2wiLCJsaXN0VXNlclBvb2xzIiwiTWF4UmVzdWx0cyIsInByb21pc2UiLCJVc2VyUG9vbHMiLCJmaW5kIiwicG9vbCIsIk5hbWUiLCJFcnJvciIsIklkIiwiZXJyb3IiLCJjb25zb2xlIiwiUG9vbE5hbWUiLCJfYiIsInVzZXJQb29sUGFyYW1zIiwiYXNzaWduIiwiUG9saWNpZXMiLCJQYXNzd29yZFBvbGljeSIsIk1pbmltdW1MZW5ndGgiLCJSZXF1aXJlVXBwZXJjYXNlIiwiUmVxdWlyZUxvd2VyY2FzZSIsIlJlcXVpcmVOdW1iZXJzIiwiUmVxdWlyZVN5bWJvbHMiLCJVc2VybmFtZUF0dHJpYnV0ZXMiLCJjcmVhdGVVc2VyUG9vbCIsIlVzZXJQb29sIiwiYXBwQ2xpZW50SWQiLCJhcHBDbGllbnROYW1lIiwiX2MiLCJleGlzdGluZ0FwcENsaWVudCIsImxpc3RVc2VyUG9vbENsaWVudHMiLCJVc2VyUG9vbElkIiwiVXNlclBvb2xDbGllbnRzIiwiY2xpZW50IiwiQ2xpZW50TmFtZSIsIkNsaWVudElkIiwiY2hlY2tJZlVzZXJQb2xsQXBwQ2xpZW50RXhpc3RzIiwiY29nbml0b1VzZXJQb29sQXBwQ2xpZW50TmFtZSIsIl9kIiwiYXBwQ2xpZW50UGFyYW1zIiwiR2VuZXJhdGVTZWNyZXQiLCJBbGxvd2VkT0F1dGhGbG93c1VzZXJQb29sQ2xpZW50IiwiQWxsb3dlZE9BdXRoRmxvd3MiLCJBbGxvd2VkT0F1dGhTY29wZXMiLCJFeHBsaWNpdEF1dGhGbG93cyIsInByb2Nlc3MiLCJlbnYiLCJBVVRIX0ZMT1dfVFlQRSIsIkNhbGxiYWNrVVJMcyIsIkxvZ291dFVSTHMiLCJjcmVhdGVVc2VyUG9vbENsaWVudCIsIlVzZXJQb29sQ2xpZW50IiwiY3JlYXRlVXNlclBvb2xBcHBDbGllbnQiLCJjb2duaXRvVXNlclBvb2xJZCIsImNyZWF0ZVRhYmxlSWZOb3RFeGlzdHMiLCJkeW5hbW9EYiIsIkR5bmFtb0RCIiwiRG9jdW1lbnRDbGllbnQiLCJkeW5hbW9EQlNlcnZpY2UiLCJsaXN0VGFibGVzIiwiVGFibGVOYW1lcyIsImluY2x1ZGVzIiwiREJfVEFCTEVfTkFNRSIsImxvZyIsInBhcmFtcyIsIlRhYmxlTmFtZSIsIktleVNjaGVtYSIsIkF0dHJpYnV0ZU5hbWUiLCJLZXlUeXBlIiwiQXR0cmlidXRlRGVmaW5pdGlvbnMiLCJBdHRyaWJ1dGVUeXBlIiwiUHJvdmlzaW9uZWRUaHJvdWdocHV0IiwiUmVhZENhcGFjaXR5VW5pdHMiLCJXcml0ZUNhcGFjaXR5VW5pdHMiLCJ0YWJsZSIsImNyZWF0ZVRhYmxlIiwiaGFuZGxlciIsImNvZ25pdG9fMSIsImR5bmFtb0RCXzEiLCJ2YWxpZGF0aW9uc18xIiwiYXBpR2V0d2F5XzEiLCJldmVudCIsInZhbGlkIiwibWVzc2FnZSIsInZhbGlkYXRlUmVxdWVzdCIsInZhbGlkYXRpb25zIiwicmVxdWVzdEJvZHkiLCJwYXJzZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsInBob25lTnVtYmVyIiwidXNlcklkIiwicGhvbmVOdW1iZXJXaXRoQ291bnRyeUNvZGUiLCJjb25jYXQiLCJzdWJzdHIiLCJwYXJhbXNGb3JDb2duaXRvIiwiQVBQX0NMSUVOVF9JRCIsIlBhc3N3b3JkIiwiVXNlcm5hbWUiLCJVc2VyQXR0cmlidXRlcyIsIlZhbHVlIiwicGFyYW1zRm9yRERCIiwic2lnblVwIiwiSXRlbSIsImlkIiwicHV0IiwidmFsaWRhdGVTdHJpbmdNYXhMZW5ndGgiLCJ2YWxpZGF0ZUlzcmFlbGlQaG9uZU51bWJlciIsInZhbGlkYXRlSXNyYWVsaUlEIiwidmFsaWRhdGVTdHJpbmdNaW5MZW5ndGgiLCJrZXkiLCJ2YWxpZGF0aW9uRnVuY3Rpb24iLCJsZW5ndGgiLCJ0ZXN0IiwiU3RyaW5nIiwidHJpbSIsInNsaWNlIiwiQXJyYXkiLCJmcm9tIiwiTnVtYmVyIiwicmVkdWNlIiwiY291bnRlciIsImRpZ2l0IiwiaSIsIm1vZHVsZSIsInJlcXVpcmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiXSwic291cmNlUm9vdCI6IiJ9