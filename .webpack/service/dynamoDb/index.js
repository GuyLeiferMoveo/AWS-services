(()=>{"use strict";var e={827:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createResponse=void 0,t.createResponse=(e,t)=>({statusCode:e,body:JSON.stringify(t)})},583:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.createTableIfNotExists=t.dynamoDb=void 0;const o=n(336);t.dynamoDb=new o.DynamoDB.DocumentClient({region:"il-central-1"});const i=new o.DynamoDB;t.createTableIfNotExists=()=>r(void 0,void 0,void 0,(function*(){var e;try{if(null===(e=(yield i.listTables().promise()).TableNames)||void 0===e?void 0:e.includes(process.env.DB_TABLE_NAME||"users"))return void console.log(`Table ${process.env.DB_TABLE_NAME} already exists.`);const t={TableName:process.env.DB_TABLE_NAME||"users",KeySchema:[{AttributeName:"userId",KeyType:"HASH"}],AttributeDefinitions:[{AttributeName:"userId",AttributeType:"S"}],ProvisionedThroughput:{ReadCapacityUnits:5,WriteCapacityUnits:5}},n=yield i.createTable(t).promise();return console.log(`Table ${process.env.DB_TABLE_NAME} created successfully.`),n}catch(e){console.error("Error creating table:",e)}}))},966:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.handler=void 0;const o=n(583),i=n(827);t.handler=e=>r(void 0,void 0,void 0,(function*(){try{const e=yield(0,o.createTableIfNotExists)();return(0,i.createResponse)(200,{dynamoDbTable:e})}catch(e){return(0,i.createResponse)(400,{error:e.message})}}))},336:e=>{e.exports=require("aws-sdk")}},t={},n=function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}(966),r=exports;for(var o in n)r[o]=n[o];n.__esModule&&Object.defineProperty(r,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,