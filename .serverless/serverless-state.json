{
  "service": {
    "service": "lambda",
    "serviceObject": {
      "name": "lambda"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "region": "il-central-1",
      "stage": "DEV",
      "profile": "default",
      "environment": {
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
        "DB_TABLE_NAME": "users2",
        "LOGGER_ENABLE": "true",
        "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "UserPoolLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-DEV-userPool"
            }
          },
          "DynamoDbLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-DEV-dynamoDb"
            }
          },
          "PostUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-DEV-postUser"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-DEV-getUser"
            }
          },
          "UserLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-DEV-userLogin"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/lambda-DEV-updateUser"
            }
          },
          "UserPoolLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda/DEV/1692024906728-2023-08-14T14:55:06.728Z/lambda.zip"
              },
              "Handler": "userPool/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "lambda-DEV-userPool",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
                  "DB_TABLE_NAME": "users2",
                  "LOGGER_ENABLE": "true",
                  "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
                }
              },
              "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
            },
            "DependsOn": [
              "UserPoolLogGroup"
            ]
          },
          "DynamoDbLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda/DEV/1692024906728-2023-08-14T14:55:06.728Z/lambda.zip"
              },
              "Handler": "dynamoDb/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "lambda-DEV-dynamoDb",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
                  "DB_TABLE_NAME": "users2",
                  "LOGGER_ENABLE": "true",
                  "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
                }
              },
              "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
            },
            "DependsOn": [
              "DynamoDbLogGroup"
            ]
          },
          "PostUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda/DEV/1692024906728-2023-08-14T14:55:06.728Z/lambda.zip"
              },
              "Handler": "postUser/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "lambda-DEV-postUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
                  "DB_TABLE_NAME": "users2",
                  "LOGGER_ENABLE": "true",
                  "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
                }
              },
              "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
            },
            "DependsOn": [
              "PostUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda/DEV/1692024906728-2023-08-14T14:55:06.728Z/lambda.zip"
              },
              "Handler": "getUser/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "lambda-DEV-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
                  "DB_TABLE_NAME": "users2",
                  "LOGGER_ENABLE": "true",
                  "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
                }
              },
              "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UserLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda/DEV/1692024906728-2023-08-14T14:55:06.728Z/lambda.zip"
              },
              "Handler": "userLogin/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "lambda-DEV-userLogin",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
                  "DB_TABLE_NAME": "users2",
                  "LOGGER_ENABLE": "true",
                  "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
                }
              },
              "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
            },
            "DependsOn": [
              "UserLoginLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/lambda/DEV/1692024906728-2023-08-14T14:55:06.728Z/lambda.zip"
              },
              "Handler": "updateUser/index.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "lambda-DEV-updateUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
                  "DB_TABLE_NAME": "users2",
                  "LOGGER_ENABLE": "true",
                  "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
                }
              },
              "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "UserPoolLambdaVersionAzP0CokLbcNA4zejAvQb92PTMNcc3R57G7LTTpUUec": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserPoolLambdaFunction"
              },
              "CodeSha256": "3tuOeWwwDa6lBtI/TPb5Zbaxn3s8w118yN0BfXq9Lz0="
            }
          },
          "DynamoDbLambdaVersionubfDt2GYKp3UwMg2SutQcnKL2J8sysP2T48MFY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DynamoDbLambdaFunction"
              },
              "CodeSha256": "3tuOeWwwDa6lBtI/TPb5Zbaxn3s8w118yN0BfXq9Lz0="
            }
          },
          "PostUserLambdaVersionfYSkoYM3hPybfi8u383QksL8jNrZL3Es9g1EDvPjSUc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostUserLambdaFunction"
              },
              "CodeSha256": "3tuOeWwwDa6lBtI/TPb5Zbaxn3s8w118yN0BfXq9Lz0="
            }
          },
          "GetUserLambdaVersionTtht7ToPblcHvpOac67qTGMntjpz5IrQ52auc2CEy0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "3tuOeWwwDa6lBtI/TPb5Zbaxn3s8w118yN0BfXq9Lz0="
            }
          },
          "UserLoginLambdaVersionw9Ki5GdHzjec8T2u4cAe8wx9oGTWU7Lqr6AzpT9Rg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserLoginLambdaFunction"
              },
              "CodeSha256": "3tuOeWwwDa6lBtI/TPb5Zbaxn3s8w118yN0BfXq9Lz0="
            }
          },
          "UpdateUserLambdaVersionjtCeF7treV8uoIu73aO11d52wMD3R5FVerwwY2BO8A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "3tuOeWwwDa6lBtI/TPb5Zbaxn3s8w118yN0BfXq9Lz0="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "DEV-lambda",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUserpool": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "userPool",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDynamodb": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "dynamoDb",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserpoolPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserpool"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserPoolLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UserPoolLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDynamodbPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDynamodb"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DynamoDbLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DynamoDbLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PostUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserLoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UserLoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1692024897636": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "DEV"
            },
            "DependsOn": [
              "ApiGatewayMethodUserpoolPost",
              "ApiGatewayMethodDynamodbPost",
              "ApiGatewayMethodUserPost",
              "ApiGatewayMethodUserGet",
              "ApiGatewayMethodUserLoginPost",
              "ApiGatewayMethodUserPut"
            ]
          },
          "UserPoolLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserPoolLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DynamoDbLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DynamoDbLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserLoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-lambda-DEV-ServerlessDeploymentBucketName"
            }
          },
          "UserPoolLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserPoolLambdaVersionAzP0CokLbcNA4zejAvQb92PTMNcc3R57G7LTTpUUec"
            },
            "Export": {
              "Name": "sls-lambda-DEV-UserPoolLambdaFunctionQualifiedArn"
            }
          },
          "DynamoDbLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DynamoDbLambdaVersionubfDt2GYKp3UwMg2SutQcnKL2J8sysP2T48MFY"
            },
            "Export": {
              "Name": "sls-lambda-DEV-DynamoDbLambdaFunctionQualifiedArn"
            }
          },
          "PostUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostUserLambdaVersionfYSkoYM3hPybfi8u383QksL8jNrZL3Es9g1EDvPjSUc"
            },
            "Export": {
              "Name": "sls-lambda-DEV-PostUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionTtht7ToPblcHvpOac67qTGMntjpz5IrQ52auc2CEy0"
            },
            "Export": {
              "Name": "sls-lambda-DEV-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "UserLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserLoginLambdaVersionw9Ki5GdHzjec8T2u4cAe8wx9oGTWU7Lqr6AzpT9Rg"
            },
            "Export": {
              "Name": "sls-lambda-DEV-UserLoginLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionjtCeF7treV8uoIu73aO11d52wMD3R5FVerwwY2BO8A"
            },
            "Export": {
              "Name": "sls-lambda-DEV-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/DEV"
                ]
              ]
            },
            "Export": {
              "Name": "sls-lambda-DEV-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline",
      "serverless-webpack"
    ],
    "pluginsData": {},
    "functions": {
      "userPool": {
        "handler": "userPool/index.handler",
        "role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "userPool",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lambda-DEV-userPool",
        "package": {
          "artifact": ".serverless/lambda.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UserPoolLambdaVersionAzP0CokLbcNA4zejAvQb92PTMNcc3R57G7LTTpUUec"
      },
      "dynamoDb": {
        "handler": "dynamoDb/index.handler",
        "role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "dynamoDb",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lambda-DEV-dynamoDb",
        "package": {
          "artifact": ".serverless/lambda.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DynamoDbLambdaVersionubfDt2GYKp3UwMg2SutQcnKL2J8sysP2T48MFY"
      },
      "postUser": {
        "handler": "postUser/index.handler",
        "role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "user",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "cognito-idp:AdminCreateUser",
              "cognito-idp:AdminUpdateUserAttributes"
            ],
            "Resource": "arn:aws:cognito-idp:eu-west-1:779000067130:userpool/eu-west-1_qKZ7VW7u4"
          }
        ],
        "name": "lambda-DEV-postUser",
        "package": {
          "artifact": ".serverless/lambda.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "PostUserLambdaVersionfYSkoYM3hPybfi8u383QksL8jNrZL3Es9g1EDvPjSUc"
      },
      "getUser": {
        "handler": "getUser/index.handler",
        "role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "user",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lambda-DEV-getUser",
        "package": {
          "artifact": ".serverless/lambda.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionTtht7ToPblcHvpOac67qTGMntjpz5IrQ52auc2CEy0"
      },
      "userLogin": {
        "handler": "userLogin/index.handler",
        "role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "user/login",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lambda-DEV-userLogin",
        "package": {
          "artifact": ".serverless/lambda.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UserLoginLambdaVersionw9Ki5GdHzjec8T2u4cAe8wx9oGTWU7Lqr6AzpT9Rg"
      },
      "updateUser": {
        "handler": "updateUser/index.handler",
        "role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",
        "events": [
          {
            "http": {
              "method": "put",
              "path": "user",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "lambda-DEV-updateUser",
        "package": {
          "artifact": ".serverless/lambda.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionjtCeF7treV8uoIu73aO11d52wMD3R5FVerwwY2BO8A"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.ts",
    "initialServerlessConfig": {
      "service": "lambda",
      "frameworkVersion": "3",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/lambda/DEV/1692024906728-2023-08-14T14:55:06.728Z",
    "artifact": ""
  }
}