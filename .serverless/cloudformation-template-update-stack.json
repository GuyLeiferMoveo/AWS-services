{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "UserPoolLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lambda-DEV-userPool"
      }
    },
    "PostUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lambda-DEV-postUser"
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lambda-DEV-getUser"
      }
    },
    "UserLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lambda-DEV-userLogin"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/lambda-DEV-updateUser"
      }
    },
    "UserPoolLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda/DEV/1691705611081-2023-08-10T22:13:31.081Z/lambda.zip"
        },
        "Handler": "userPool/index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "lambda-DEV-userPool",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
            "DB_TABLE_NAME": "users",
            "LOGGER_ENABLE": "true",
            "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
          }
        },
        "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
      },
      "DependsOn": [
        "UserPoolLogGroup"
      ]
    },
    "PostUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda/DEV/1691705611081-2023-08-10T22:13:31.081Z/lambda.zip"
        },
        "Handler": "postUser/index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "lambda-DEV-postUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
            "DB_TABLE_NAME": "users",
            "LOGGER_ENABLE": "true",
            "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
          }
        },
        "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
      },
      "DependsOn": [
        "PostUserLogGroup"
      ]
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda/DEV/1691705611081-2023-08-10T22:13:31.081Z/lambda.zip"
        },
        "Handler": "getUser/index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "lambda-DEV-getUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
            "DB_TABLE_NAME": "users",
            "LOGGER_ENABLE": "true",
            "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
          }
        },
        "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "UserLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda/DEV/1691705611081-2023-08-10T22:13:31.081Z/lambda.zip"
        },
        "Handler": "userLogin/index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "lambda-DEV-userLogin",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
            "DB_TABLE_NAME": "users",
            "LOGGER_ENABLE": "true",
            "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
          }
        },
        "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
      },
      "DependsOn": [
        "UserLoginLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/lambda/DEV/1691705611081-2023-08-10T22:13:31.081Z/lambda.zip"
        },
        "Handler": "updateUser/index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "lambda-DEV-updateUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "APP_CLIENT_ID": "4f0u7m4bja6if53uuoloktbaf6",
            "DB_TABLE_NAME": "users",
            "LOGGER_ENABLE": "true",
            "AUTH_FLOW_TYPE": "USER_PASSWORD_AUTH"
          }
        },
        "Role": "arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole"
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "UserPoolLambdaVersionhDgLqbCmPdqkXs0UJl09OhKfUeFqzfYjPCxfT2pgXo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserPoolLambdaFunction"
        },
        "CodeSha256": "aOJOgKqfhMqr0b0/DMnRCECxJQpdCnBKAdBnQvbZxYQ="
      }
    },
    "PostUserLambdaVersiong3hPF2e761iMg8d355UBCoIIxWGxS5KQ48aNONf1Yc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostUserLambdaFunction"
        },
        "CodeSha256": "aOJOgKqfhMqr0b0/DMnRCECxJQpdCnBKAdBnQvbZxYQ="
      }
    },
    "GetUserLambdaVersionP2mjdFUNmwHf0849gAxNtjco5HkeC7wQsgtH7NKiHj4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "aOJOgKqfhMqr0b0/DMnRCECxJQpdCnBKAdBnQvbZxYQ="
      }
    },
    "UserLoginLambdaVersionEeIQFh7XGIcZpXHwOp4b6ZwLONTP5inzhGZqYyYBLg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UserLoginLambdaFunction"
        },
        "CodeSha256": "aOJOgKqfhMqr0b0/DMnRCECxJQpdCnBKAdBnQvbZxYQ="
      }
    },
    "UpdateUserLambdaVersion4YtfrhaITvmV0FWxe6KVDCXWBEO85LzdW4aFuQfh4M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "aOJOgKqfhMqr0b0/DMnRCECxJQpdCnBKAdBnQvbZxYQ="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "DEV-lambda",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceUserpool": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "userPool",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUserpoolPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserpool"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserPoolLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UserPoolLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PostUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PostUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UserLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UserLoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1691705602973": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "DEV"
      },
      "DependsOn": [
        "ApiGatewayMethodUserpoolPost",
        "ApiGatewayMethodUserPost",
        "ApiGatewayMethodUserGet",
        "ApiGatewayMethodUserLoginPost",
        "ApiGatewayMethodUserPut"
      ]
    },
    "UserPoolLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserPoolLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PostUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UserLoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UserLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-lambda-DEV-ServerlessDeploymentBucketName"
      }
    },
    "UserPoolLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserPoolLambdaVersionhDgLqbCmPdqkXs0UJl09OhKfUeFqzfYjPCxfT2pgXo"
      },
      "Export": {
        "Name": "sls-lambda-DEV-UserPoolLambdaFunctionQualifiedArn"
      }
    },
    "PostUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostUserLambdaVersiong3hPF2e761iMg8d355UBCoIIxWGxS5KQ48aNONf1Yc"
      },
      "Export": {
        "Name": "sls-lambda-DEV-PostUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersionP2mjdFUNmwHf0849gAxNtjco5HkeC7wQsgtH7NKiHj4"
      },
      "Export": {
        "Name": "sls-lambda-DEV-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "UserLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UserLoginLambdaVersionEeIQFh7XGIcZpXHwOp4b6ZwLONTP5inzhGZqYyYBLg"
      },
      "Export": {
        "Name": "sls-lambda-DEV-UserLoginLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersion4YtfrhaITvmV0FWxe6KVDCXWBEO85LzdW4aFuQfh4M"
      },
      "Export": {
        "Name": "sls-lambda-DEV-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/DEV"
          ]
        ]
      },
      "Export": {
        "Name": "sls-lambda-DEV-ServiceEndpoint"
      }
    }
  }
}